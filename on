[1mdiff --git a/bin/cli.js b/bin/cli.js[m
[1mindex e5f2bb9..fdfdebe 100755[m
[1m--- a/bin/cli.js[m
[1m+++ b/bin/cli.js[m
[36m@@ -5,41 +5,120 @@[m
  * This allows the package to be installed globally and run as a command[m
  */[m
 [m
[31m-import { fileURLToPath } from 'url';[m
[31m-import path from 'path';[m
[31m-import fs from 'fs';[m
[32m+[m[32m// Using CommonJS require for better compatibility in global installs[m
[32m+[m[32mconst path = require('path');[m
[32m+[m[32mconst fs = require('fs');[m
[32m+[m[32mconst url = require('url');[m
 [m
 // Get this script's directory[m
[31m-const __filename = fileURLToPath(import.meta.url);[m
[31m-const __dirname = path.dirname(__filename);[m
[31m-const packageRoot = path.resolve(__dirname, '..');[m
[31m-[m
[31m-// Possible entry points in priority order[m
[31m-const possibleEntryPoints = [[m
[31m-  path.join(packageRoot, 'dist', 'main.js'),[m
[31m-  path.join(packageRoot, 'dist', 'smithery-adapter.js')[m
[31m-];[m
[31m-[m
[31m-// Find the first entry point that exists[m
[31m-let entryPointToRun = null;[m
[31m-for (const entryPoint of possibleEntryPoints) {[m
[31m-  if (fs.existsSync(entryPoint)) {[m
[31m-    entryPointToRun = entryPoint;[m
[31m-    break;[m
[31m-  }[m
[32m+[m[32mlet __dirname;[m
[32m+[m[32mtry {[m
[32m+[m[32m  // ESM environment[m
[32m+[m[32m  __dirname = path.dirname(url.fileURLToPath(import.meta.url));[m
[32m+[m[32m  // Continue with ESM imports[m
[32m+[m[32m  runWithESM();[m
[32m+[m[32m} catch (error) {[m
[32m+[m[32m  // CommonJS environment[m
[32m+[m[32m  __dirname = __dirname || path.dirname(require.caller?.filename || __filename);[m
[32m+[m[32m  // Continue with CommonJS[m
[32m+[m[32m  runWithCommonJS();[m
 }[m
 [m
[31m-if (!entryPointToRun) {[m
[31m-  console.error(`Error: Cannot find any main application file.`);[m
[31m-  console.error(`Checked: ${possibleEntryPoints.join(', ')}`);[m
[31m-  console.error('Did you build the project? Try running "npm run build" first.');[m
[31m-  process.exit(1);[m
[32m+[m[32masync function runWithESM() {[m
[32m+[m[32m  const packageRoot = path.resolve(__dirname, '..');[m
[32m+[m
[32m+[m[32m  // Possible entry points in priority order[m
[32m+[m[32m  const possibleEntryPoints = [[m
[32m+[m[32m    path.join(packageRoot, 'dist', 'main.js'),[m
[32m+[m[32m    path.join(packageRoot, 'dist', 'smithery-adapter.js')[m
[32m+[m[32m  ];[m
[32m+[m
[32m+[m[32m  // Find the first entry point that exists[m
[32m+[m[32m  let entryPointToRun = null;[m
[32m+[m[32m  for (const entryPoint of possibleEntryPoints) {[m
[32m+[m[32m    if (fs.existsSync(entryPoint)) {[m
[32m+[m[32m      entryPointToRun = entryPoint;[m
[32m+[m[32m      break;[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  if (!entryPointToRun) {[m
[32m+[m[32m    console.error(`Error: Cannot find any main application file.`);[m
[32m+[m[32m    console.error(`Checked: ${possibleEntryPoints.join(', ')}`);[m
[32m+[m[32m    console.error('Did you build the project? Try running "npm run build" first.');[m
[32m+[m[32m    process.exit(1);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  console.log(`Starting MCP server from: ${entryPointToRun}`);[m
[32m+[m
[32m+[m[32m  // Execute the entry point[m
[32m+[m[32m  import(entryPointToRun).catch(err => {[m
[32m+[m[32m    console.error('Error starting the application:', err);[m
[32m+[m[32m    process.exit(1);[m
[32m+[m[32m  });[m
 }[m
 [m
[31m-console.log(`Starting MCP server from: ${entryPointToRun}`);[m
[32m+[m[32mfunction runWithCommonJS() {[m
[32m+[m[32m  const packageRoot = path.resolve(__dirname, '..');[m
 [m
[31m-// Execute the entry point[m
[31m-import(entryPointToRun).catch(err => {[m
[31m-  console.error('Error starting the application:', err);[m
[31m-  process.exit(1);[m
[31m-}); [m
\ No newline at end of file[m
[32m+[m[32m  // Possible entry points in priority order (using .cjs extension for CommonJS)[m
[32m+[m[32m  const possibleEntryPoints = [[m
[32m+[m[32m    path.join(packageRoot, 'dist', 'main.js'),[m
[32m+[m[32m    path.join(packageRoot, 'dist', 'smithery-adapter.js')[m
[32m+[m[32m  ];[m
[32m+[m
[32m+[m[32m  // Find the first entry point that exists[m
[32m+[m[32m  let entryPointToRun = null;[m
[32m+[m[32m  for (const entryPoint of possibleEntryPoints) {[m
[32m+[m[32m    if (fs.existsSync(entryPoint)) {[m
[32m+[m[32m      entryPointToRun = entryPoint;[m
[32m+[m[32m      break;[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  if (!entryPointToRun) {[m
[32m+[m[32m    console.error(`Error: Cannot find any main application file.`);[m
[32m+[m[32m    console.error(`Checked: ${possibleEntryPoints.join(', ')}`);[m
[32m+[m[32m    console.error('The package may not be built correctly.');[m
[32m+[m[41m    [m
[32m+[m[32m    // Attempt to build the package if src directory exists[m
[32m+[m[32m    if (fs.existsSync(path.join(packageRoot, 'src'))) {[m
[32m+[m[32m      console.log('Attempting to build the package...');[m
[32m+[m[32m      try {[m
[32m+[m[32m        require('child_process').execSync('npx tsc -p tsconfig.json', {[m
[32m+[m[32m          cwd: packageRoot,[m
[32m+[m[32m          stdio: 'inherit'[m
[32m+[m[32m        });[m
[32m+[m[32m        console.log('Build successful, retrying...');[m
[32m+[m[41m        [m
[32m+[m[32m        // Check again after building[m
[32m+[m[32m        for (const entryPoint of possibleEntryPoints) {[m
[32m+[m[32m          if (fs.existsSync(entryPoint)) {[m
[32m+[m[32m            entryPointToRun = entryPoint;[m
[32m+[m[32m            break;[m
[32m+[m[32m          }[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        if (!entryPointToRun) {[m
[32m+[m[32m          console.error('Build completed but still cannot find entry point.');[m
[32m+[m[32m          process.exit(1);[m
[32m+[m[32m        }[m
[32m+[m[32m      } catch (error) {[m
[32m+[m[32m        console.error('Failed to build the package:', error);[m
[32m+[m[32m        process.exit(1);[m
[32m+[m[32m      }[m
[32m+[m[32m    } else {[m
[32m+[m[32m      process.exit(1);[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  console.log(`Starting MCP server from: ${entryPointToRun}`);[m
[32m+[m
[32m+[m[32m  // Execute the entry point[m
[32m+[m[32m  try {[m
[32m+[m[32m    require(entryPointToRun);[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    console.error('Error starting the application:', err);[m
[32m+[m[32m    process.exit(1);[m
[32m+[m[32m  }[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
